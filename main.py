import asyncio
import os
import aiohttp
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton, Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command
import logging
import config
import keyboard
import json
from aiogram import types
from aiogram.dispatcher import FSMContext
import json, os


class SettingsStates(StatesGroup):
    waiting_for_city = State()

class NotificationStates(StatesGroup):
    waiting_for_morning_time = State()
    waiting_for_evening_time = State()

class NotifyState(StatesGroup):
    choosing_morning_time = State()
    choosing_evening_time = State()

class TempStates(StatesGroup):
    waiting_for_temp_city = State()

class TempCityChoiceState(StatesGroup):
    waiting_for_city = State()

class CityInput(StatesGroup):
    input = State()

storage = MemoryStorage()
bot = Bot(token=config.botkey)
dp = Dispatcher(bot, storage=storage)



# ========================= –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ START =========================

@dp.message_handler(Command('start'), state=None)
async def welcome(message: types.Message):
    if not os.path.exists('user.txt'):
        open('user.txt', 'w').close()

    with open('user.txt', 'r') as joinedFile:
        joinedUsers = set(line.strip() for line in joinedFile)

    if str(message.chat.id) not in joinedUsers:
        with open('user.txt', 'a') as joinedFile:
            joinedFile.write(str(message.chat.id) + '\n')

    await bot.send_message(
        message.chat.id,
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
        reply_markup=keyboard.start_inline,
        parse_mode='Markdown'
    )

    await bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=keyboard.start
    )



# ========================= –ü–û–ì–û–î–ê –ù–ê –°–ï–ì–û–î–ù–Ø =========================

# --- –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ API ---
async def get_today_weather(city: str) -> str:
    api_key = config.weather_api_key
    url = f"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=1&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()

                location = data['location']['name']
                country = data['location']['country']
                current = data['current']
                forecast = data['forecast']['forecastday'][0]['day']

                condition = current['condition']['text']
                temp = current['temp_c']
                feels_like = current['feelslike_c']
                wind = current['wind_kph']
                humidity = current['humidity']
                max_temp = forecast['maxtemp_c']
                min_temp = forecast['mintemp_c']

                return (
                    f"üìç –ü–æ–≥–æ–¥–∞ –≤ {location}, {country} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                    f"üå§ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üî∫ –ú–∞–∫—Å: {max_temp}¬∞C, üîª –ú–∏–Ω: {min_temp}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á"
                )
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."

# --- –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
async def send_today_forecast(user_id: int, send_func):
    if not os.path.exists('user_cities.json'):
        await send_func("‚ö† –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    with open('user_cities.json', 'r') as f:
        cities = json.load(f)

    city = cities.get(str(user_id))
    if city:
        forecast = await get_today_weather(city)

        # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        inline_kb = InlineKeyboardMarkup()
        inline_kb.add(InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ (–ø–æ—á–∞—Å–æ–≤–∞—è)", callback_data=f"hourly_{city}"))

        await send_func(forecast, reply_markup=inline_kb)
    else:
        await send_func("‚ö† –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–±—Ä–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" ---
@dp.message_handler(lambda message: message.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def handle_today_weather_message(message: types.Message):
    await send_today_forecast(
        user_id=message.from_user.id,
        send_func=message.answer
    )

# --- –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ ---
@dp.callback_query_handler(lambda c: c.data.startswith("hourly_") and not c.data.startswith("hourly_tomorrow_"))
async def handle_hourly_today(callback_query: types.CallbackQuery):
    city = callback_query.data.replace("hourly_", "")
    api_key = config.weather_api_key
    url = f"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=1&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status != 200:
                await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑.")
                await callback_query.answer()
                return

            data = await resp.json()
            hours = data['forecast']['forecastday'][0]['hour']

            text = f"üïí –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            for hour in hours:
                time = hour['time'].split(" ")[1]
                condition = hour['condition']['text']
                temp = hour['temp_c']
                feels = hour['feelslike_c']
                wind = hour['wind_kph']
                text += f"üïì {time} ‚Äî {condition}, üå° {temp}¬∞C, –æ—â. {feels}¬∞C, üí® {wind} –∫–º/—á\n"

            for i in range(0, len(text), 4000):
                await bot.send_message(callback_query.from_user.id, text[i:i+4000])

    await callback_query.answer()



# ========================= –ü–û–ì–û–î–ê –ù–ê –ó–ê–í–¢–†–ê =========================

# --- –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ API ---
async def get_tomorrow_weather(city: str) -> str:
    api_key = config.weather_api_key
    url = f"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=2&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()

                location = data['location']['name']
                country = data['location']['country']
                forecast = data['forecast']['forecastday'][1]['day']  # –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å

                condition = forecast['condition']['text']
                max_temp = forecast['maxtemp_c']
                min_temp = forecast['mintemp_c']
                avg_temp = forecast['avgtemp_c']
                wind = forecast['maxwind_kph']
                humidity = forecast['avghumidity']

                return (
                    f"üìç –ü–æ–≥–æ–¥–∞ –≤ {location}, {country} –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
                    f"üå§ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
                    f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp}¬∞C\n"
                    f"üî∫ –ú–∞–∫—Å: {max_temp}¬∞C, üîª –ú–∏–Ω: {min_temp}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á"
                )
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."


# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞" ---
@dp.message_handler(lambda message: message.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
async def handle_tomorrow_weather_message(message: types.Message):
    user_id = str(message.from_user.id)

    if not os.path.exists('user_cities.json'):
        await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    with open('user_cities.json', 'r') as f:
        cities = json.load(f)

    city = cities.get(user_id)
    if city:
        forecast = await get_tomorrow_weather(city)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ü–æ—á–∞—Å–æ–≤–æ–π"
        inline_kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ (–ø–æ—á–∞—Å–æ–≤–∞—è)", callback_data=f"hourly_tomorrow_{city}")
        )

        await message.answer(forecast, reply_markup=inline_kb)
    else:
        await message.answer("‚ö† –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–±—Ä–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


# --- –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ ---
@dp.callback_query_handler(lambda c: c.data.startswith("hourly_tomorrow_"))
async def handle_hourly_tomorrow(callback_query: types.CallbackQuery):
    city = callback_query.data.replace("hourly_tomorrow_", "")
    api_key = config.weather_api_key
    url = f"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=2&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status != 200:
                await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑.")
                await callback_query.answer()
                return

            data = await resp.json()
            hours = data['forecast']['forecastday'][1]['hour']  # –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å

            text = f"üïí –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city} –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
            for hour in hours:
                time = hour['time'].split(" ")[1]
                condition = hour['condition']['text']
                temp = hour['temp_c']
                feels = hour['feelslike_c']
                wind = hour['wind_kph']
                text += f"üïì {time} ‚Äî {condition}, üå° {temp}¬∞C, –æ—â. {feels}¬∞C, üí® {wind} –∫–º/—á\n"

            for i in range(0, len(text), 4000):
                await bot.send_message(callback_query.from_user.id, text[i:i+4000])

    await callback_query.answer()



# ========================= –ü–û–ì–û–î–ê –ù–ê –ù–ï–î–ï–õ–Æ =========================

# --- –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ API ---
async def get_week_weather(city: str) -> str:
    api_key = config.weather_api_key
    url = f"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=7&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                location = data['location']['name']
                country = data['location']['country']
                forecast_days = data['forecast']['forecastday']

                result = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ {location}, {country}:\n\n"

                for day in forecast_days:
                    date = day['date']
                    condition = day['day']['condition']['text']
                    max_temp = day['day']['maxtemp_c']
                    min_temp = day['day']['mintemp_c']
                    avg_temp = day['day']['avgtemp_c']

                    result += (
                        f"üìÜ *{date}*\n"
                        f"üå§ {condition}\n"
                        f"üå° –°—Ä–µ–¥–Ω—è—è: {avg_temp}¬∞C\n"
                        f"üî∫ –ú–∞–∫—Å: {max_temp}¬∞C, üîª –ú–∏–Ω: {min_temp}¬∞C\n\n"
                    )

                return result
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é" ---
@dp.message_handler(lambda message: message.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def handle_week_weather_message(message: types.Message):
    user_id = str(message.from_user.id)

    if not os.path.exists('user_cities.json'):
        await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    with open('user_cities.json', 'r') as f:
        cities = json.load(f)

    city = cities.get(user_id)
    if city:
        forecast = await get_week_weather(city)
        await message.answer(forecast, parse_mode='Markdown')
    else:
        await message.answer("‚ö† –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–±—Ä–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")



# ========================= –ù–ê–°–¢–†–û–ô–ö–ò =========================

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ---
# –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ù–∞–∑–∞–¥)
@dp.message_handler(lambda m: m.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def open_settings(message: types.Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard.settings_kb)

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –ø–æ–¥–º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def on_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard.start)

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" ---
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
@dp.message_handler(lambda message: message.text == "–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
async def ask_for_city(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ (–Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ):")
    await SettingsStates.waiting_for_city.set()

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(state=SettingsStates.waiting_for_city)
async def save_default_city(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=keyboard.settings_kb)
        return

    city = message.text.strip()
    api_key = config.weather_api_key

    async with aiohttp.ClientSession() as session:
        url = f"http://api.weatherapi.com/v1/current.json?key={api_key}&q={city}&lang=ru"
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                city_name = data['location']['name']
                country = data['location']['country']
                lat = data['location']['lat']
                lon = data['location']['lon']

                user_id = str(message.from_user.id)

                if os.path.exists('user_cities.json'):
                    with open('user_cities.json', 'r') as f:
                        cities = json.load(f)
                else:
                    cities = {}

                cities[user_id] = city_name
                with open('user_cities.json', 'w') as f:
                    json.dump(cities, f)

                await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city_name}, {country}")
                await bot.send_location(chat_id=message.chat.id, latitude=lat, longitude=lon)
                await message.answer(f"‚öô –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ì–æ—Ä–æ–¥ ‚Äî {city_name}")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.finish()


# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ ---
# –ø–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
@dp.callback_query_handler(lambda c: c.data == 'weather_saved')
async def handle_saved_city(callback_query: types.CallbackQuery):
    await send_today_forecast(
        user_id=callback_query.from_user.id,
        send_func=lambda *args, **kwargs: bot.send_message(callback_query.from_user.id, *args, **kwargs)
    )

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" ---
# –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == 'set_default_city')
async def handle_set_default_city_inline(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ (–Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ):")
    await SettingsStates.waiting_for_city.set()


# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" ---
@dp.callback_query_handler(lambda c: c.data == 'weather_other')
async def handle_other_city(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
    await TempStates.waiting_for_temp_city.set()


# --- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@dp.message_handler(state=TempStates.waiting_for_temp_city)
async def handle_temp_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    forecast = await get_today_weather(city)
    await message.answer(forecast)
    await state.finish()


# --- –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è / –Ω–∞ –∑–∞–≤—Ç—Ä–∞ / –Ω–∞ –Ω–µ–¥–µ–ª—é - –≤—ã–±–æ—Ä ---
@dp.callback_query_handler(lambda c: c.data == 'temp_city_menu')
async def show_temp_city_options(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='temp_city_today'),
        InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='temp_city_tomorrow'),
        InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data='temp_city_week')
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑:", reply_markup=kb)


# --- —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ ---
@dp.callback_query_handler(lambda c: c.data.startswith('temp_city_'))
async def ask_temp_city(callback_query: types.CallbackQuery, state: FSMContext):
    period = callback_query.data.split('_')[-1]  # today / tomorrow / week
    await state.update_data(temp_period=period)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ):")
    await TempCityChoiceState.waiting_for_city.set()


# --- –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ ---
@dp.message_handler(state=TempCityChoiceState.waiting_for_city)
async def handle_temp_city(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    period = user_data.get("temp_period")
    city = message.text.strip()

    forecast = ""
    inline_kb = None

    if period == 'today':
        forecast = await get_today_weather(city)
        inline_kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ (–ø–æ—á–∞—Å–æ–≤–∞—è)", callback_data=f"hourly_{city}")
        )
    elif period == 'tomorrow':
        forecast = await get_tomorrow_weather(city)
        inline_kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ (–ø–æ—á–∞—Å–æ–≤–∞—è)", callback_data=f"hourly_tomorrow_{city}")
        )
    elif period == 'week':
        forecast = await get_week_weather(city)

    if inline_kb:
        await message.answer(forecast, reply_markup=inline_kb, parse_mode="Markdown")
    else:
        await message.answer(forecast, parse_mode="Markdown")

    await state.finish()


# --- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ - –ø–æ—á–∞—Å–æ–≤–∞—è ---
@dp.message_handler(state=CityInput.input)
async def process_city_input(message: types.Message, state: FSMContext):
    city = message.text.strip()

    forecast = await get_today_weather(city)

    inline_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ (–ø–æ—á–∞—Å–æ–≤–∞—è)", callback_data=f"hourly_{city}")
    )

    await message.answer(forecast, reply_markup=inline_kb)

    await state.clear()


# --- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ü–æ—á–∞—Å–æ–≤–∞—è –ø–æ–≥–æ–¥–∞ ---
@dp.callback_query_handler(lambda c: c.data.startswith("hourly_"))
async def handle_hourly_forecast(callback_query: types.CallbackQuery):
    city = callback_query.data.replace("hourly_", "")

    api_key = config.weather_api_key
    url = f"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=1&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                hours = data['forecast']['forecastday'][0]['hour']

                text = f"üïí –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                for hour in hours:
                    time = hour['time'].split(" ")[1]
                    condition = hour['condition']['text']
                    temp = hour['temp_c']
                    feels = hour['feelslike_c']
                    wind = hour['wind_kph']
                    text += f"üïì {time} ‚Äî {condition}, üå° {temp}¬∞C, –æ—â. {feels}¬∞C, üí® {wind} –∫–º/—á\n"

                if len(text) > 4000:
                    for i in range(0, len(text), 4000):
                        await bot.send_message(callback_query.from_user.id, text[i:i+4000])
                else:
                    await bot.send_message(callback_query.from_user.id, text)
            else:
                await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑.")

    await callback_query.answer()



# ========================= –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =========================

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ---
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä)
@dp.message_handler(lambda m: m.text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=keyboard.get_notify_main_kb())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" ---
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É—Ç—Ä–æ
@dp.message_handler(lambda m: m.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def choose_morning_time(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=keyboard.get_morning_time_kb())
    await NotifyState.choosing_morning_time.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
@dp.message_handler(state=NotifyState.choosing_morning_time)
async def handle_morning_time(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", reply_markup=keyboard.get_notify_main_kb())
        return await state.finish()

    elif message.text == "–û—Ç–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        save_notify(user_id, "morning", None)
        await message.answer("‚õî –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.", reply_markup=keyboard.get_notify_main_kb())
        return await state.finish()

    elif message.text in ['6:00', '7:00', '8:00', '9:00', '10:00', '11:00']:
        hour, minute = map(int, message.text.split(":"))
        save_notify(user_id, "morning", {"enabled": True, "hour": hour, "minute": minute})
        await message.answer(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {message.text}", reply_markup=keyboard.get_notify_main_kb())
        return await state.finish()

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" ---
@dp.message_handler(lambda m: m.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def choose_evening_time(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=keyboard.get_evening_time_kb())
    await NotifyState.choosing_evening_time.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
@dp.message_handler(state=NotifyState.choosing_evening_time)
async def handle_evening_time(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", reply_markup=keyboard.get_notify_main_kb())
        return await state.finish()

    elif message.text == "–û—Ç–∫–ª—é—á–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        save_notify(user_id, "evening", None)
        await message.answer("‚õî –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.", reply_markup=keyboard.get_notify_main_kb())
        return await state.finish()

    elif message.text in ['18:00', '19:00', '20:00', '21:00', '22:00', '23:00']:
        hour, minute = map(int, message.text.split(":"))
        save_notify(user_id, "evening", {"enabled": True, "hour": hour, "minute": minute})
        await message.answer(f"‚úÖ –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {message.text}", reply_markup=keyboard.get_notify_main_kb())
        return await state.finish()

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

# --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª ---
# user_id ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# period ‚Äî "morning" –∏–ª–∏ "evening"
# data ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å
def save_notify(user_id, period, data):
    path = 'user_notify.json'
    if os.path.exists(path):
        with open(path, 'r') as f:
            notify_data = json.load(f)
    else:
        notify_data = {}

    notify_data[user_id] = notify_data.get(user_id, {})
    if data:
        notify_data[user_id][period] = data
    else:
        notify_data[user_id][period] = {"enabled": False}

    with open(path, 'w') as f:
        json.dump(notify_data, f)


# ========================= –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ =========================
from aiogram.types import LabeledPrice

@dp.message_handler(lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
async def support_handler(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üç© –î–æ–Ω–∞—Ç ‚Äî 100 ‚≠ê", callback_data="donate_100"),
        InlineKeyboardButton("üç© –î–æ–Ω–∞—Ç ‚Äî 200 ‚≠ê", callback_data="donate_200")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("donate_"))
async def handle_donate(callback_query: types.CallbackQuery):
    amount = int(callback_query.data.split('_')[1])

    prices = [LabeledPrice(label=f"{amount} –∑–≤—ë–∑–¥", amount=amount * 100)]  # Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    await bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        description=f"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ {amount} –∑–≤—ë–∑–¥ ‚≠ê",
        payload=f"donate_{amount}",
        provider_token=config.provider_token,  # —Ç–æ–∫–µ–Ω –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Test)
        currency="USD",
        prices=prices,
        start_parameter="donation",
        need_name=True,
        need_email=False,
        need_phone_number=False,
        is_flexible=False
    )
    await callback_query.answer()


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout_handler(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    amount = message.successful_payment.total_amount // 100
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ {amount} ‚≠ê! ‚ú®")



if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)










